nterpolatePoint(), takes similar arguments\nbut returns the Point along the LineString at the given fraction of the\ndistance from its start point to its endpoint.\n\nST_LineInterpolatePoints() handles its arguments as described in the\nintroduction to this section, with these exceptions:\n\no If the geometry argument is not a LineString, an\n  ER_UNEXPECTED_GEOMETRY_TYPE\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_unexpected_geometry_type) error occurs.\n\no If the fractional distance argument is outside the range [0.0, 1.0],\n  an ER_DATA_OUT_OF_RANGE\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_data_out_of_range) error occurs.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html\n\n','mysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0,0 5,5 5)\');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5)                                   |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5)                                  |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5)                                  |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5))        |\n+------------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html'),(345,'ST_POINTATDISTANCE',30,'ST_PointAtDistance(ls, distance)\n\nThis function takes a LineString geometry and a distance in the range\n[0.0, ST_Length(ls)] measured in the unit of the spatial reference\nsystem (SRS) of the LineString, and returns the Point along the\nLineString at that distance from its start point. It can be used to\nanswer questions such as which Point value is 400 meters from the start\nof the road described by the geometry argument.\n\nThe function is implemented for LineString geometries in all spatial\nreference systems, both Cartesian and geographic.\n\nST_PointAtDistance() handles its arguments as described in the\nintroduction to this section, with these exceptions:\n\no If the geometry argument is not a LineString, an\n  ER_UNEXPECTED_GEOMETRY_TYPE\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_unexpected_geometry_type) error occurs.\n\no If the fractional distance argument is outside the range [0.0,\n  ST_Length(ls)], an ER_DATA_OUT_OF_RANGE\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_data_out_of_range) error occurs.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html'),(346,'ST_SYMDIFFERENCE',30,'ST_SymDifference(g1, g2)\n\nReturns a geometry that represents the point set symmetric difference\nof the geometry values g1 and g2, which is defined as:\n\ng1 symdifference g2 := (g1 union g2) difference (g1 intersection g2)\n\nOr, in function call notation:\n\nST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))\n\nThe result is in the same SRS as the geometry arguments.\n\nST_SymDifference() permits arguments in either a Cartesian or a\ngeographic SRS, and handles its arguments as described in the\nintroduction to this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'MULTIPOINT(5 0,15 10,15 25)\');\nmysql> SET @g2 = ST_GeomFromText(\'MULTIPOINT(1 1,15 10,15 25)\');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0))               |\n+---------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html'),(347,'ST_TRANSFORM',30,'ST_Transform(g, target_srid)\n\nTransforms a geometry from one spatial reference system (SRS) to\nanother. The return value is a geometry of the same type as the input\ngeometry with all coordinates transformed to the target SRID,\ntarget_srid. MySQL supports all SRSs defined by EPSG except for those\nlisted here:\n\no EPSG 1042 Krovak Modified\n\no EPSG 1043 Krovak Modified (North Orientated)\n\no EPSG 9816 Tunisia Mining Grid\n\no EPSG 9826 Lambert Conic Conformal (West Orientated)\n\nST_Transform() handles its arguments as described in the introduction\nto this section, with these exceptions:\n\no Geometry arguments that have an SRID value for a geographic SRS do\n  not produce an error.\n\no If the geometry or target SRID argument has an SRID value that refers\n  to an undefined spatial reference system (SRS), an ER_SRS_NOT_FOUND\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_srs_not_found) error occurs.\n\no If the geometry is in an SRS that ST_Transform() cannot transform\n  from, an ER_TRANSFORM_SOURCE_SRS_NOT_SUPPORTED\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_transform_source_srs_not_supported) error occurs.\n\no If the target SRID is in an SRS that ST_Transform() cannot transform\n  to, an ER_TRANSFORM_TARGET_SRS_NOT_SUPPORTED\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_transform_target_srs_not_supported) error occurs.\n\no If the geometry is in an SRS that is not WGS 84 and has no TOWGS84\n  clause, an ER_TRANSFORM_SOURCE_SRS_MISSING_TOWGS84\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_transform_source_srs_missing_towgs84) error occurs.\n\no If the target SRID is in an SRS that is not WGS 84 and has no TOWGS84\n  clause, an ER_TRANSFORM_TARGET_SRS_MISSING_TOWGS84\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_transform_target_srs_missing_towgs84) error occurs.\n\nST_SRID(g, target_srid) and ST_Transform(g, target_srid) differ as\nfollows:\n\no ST_SRID() changes the geometry SRID value without transforming its\n  coordinates.\n\no ST_Transform() transforms the geometry coordinates in addition to\n  changing its SRID value.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html\n\n','mysql> SET @p = ST_GeomFromText(\'POINT(52.381389 13.064444)\', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p)              |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p)                               |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html'),(348,'ST_UNION',30,'ST_Union(g1, g2)\n\nReturns a geometry that represents the point set union of the geometry\nvalues g1 and g2. The result is in the same SRS as the geometry\narguments.\n\nST_Union() permits arguments in either a Cartesian or a geographic SRS,\nand handles its arguments as described in the introduction to this\nsection.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'LineString(1 1, 3 3)\');\nmysql> SET @g2 = ST_GeomFromText(\'LineString(1 3, 3 1)\');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html'),(349,'ST_CONTAINS',31,'ST_Contains(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 completely contains g2. This\ntests the opposite relationship as ST_Within().\n\nST_Contains() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(350,'ST_CROSSES',31,'ST_Crosses(g1, g2)\n\nTwo geometries spatially cross if their spatial relation has the\nfollowing properties:\n\no Unless g1 and g2 are both of dimension 1: g1 crosses g2 if the\n  interior of g2 has points in common with the interior of g1, but g2\n  does not cover the entire interior of g1.\n\no If both g1 and g2 are of dimension 1: If the lines cross each other\n  in a finite number of points (that is, no common line segments, only\n  single points in common).\n\nThis function returns 1 or 0 to indicate whether g1 spatially crosses\ng2.\n\nST_Crosses() handles its arguments as described in the introduction to\nthis section except that the return value is NULL for these additional\nconditions:\n\no g1 is of dimension 2 (Polygon or MultiPolygon).\n\no g2 is of dimension 1 (Point or MultiPoint).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(351,'ST_DISJOINT',31,'ST_Disjoint(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially disjoint from (does\nnot intersect) g2.\n\nST_Disjoint() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(352,'ST_DISTANCE',31,'ST_Distance(g1, g2 [, unit])\n\nReturns the distance between g1 and g2, measured in the length unit of\nthe spatial reference system (SRS) of the geometry arguments, or in the\nunit of the optional unit argument if that is specified.\n\nThis function processes geometry collections by returning the shortest\ndistance among all combinations of the components of the two geometry\narguments.\n\nST_Distance() handles its geometry arguments as described in the\nintroduction to this section, with these exceptions:\n\no ST_Distance() detects arguments in a geographic (ellipsoidal) spatial\n  reference system and returns the geodetic distance on the ellipsoid.\n  ST_Distance() supports distance calculations for geographic SRS\n  arguments of all geometry types.\n\no If any argument is geometrically invalid, either the result is an\n  undefined distance (that is, it can be any number), or an error\n  occurs.\n\no If an intermediate or final result produces NaN or a negative number,\n  an ER_GIS_INVALID_DATA\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_gis_invalid_data) error occurs.\n\nST_Distance() permits specifying the linear unit for the returned\ndistance value with an optional unit argument which ST_Distance()\nhandles as described in the introduction to this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'POINT(1 1)\');\nmysql> SET @g2 = ST_GeomFromText(\'POINT(2 2)\');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n\nmysql> SET @g1 = ST_GeomFromText(\'POINT(1 1)\', 4326);\nmysql> SET @g2 = ST_GeomFromText(\'POINT(2 2)\', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|     156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, \'metre\');\n+--------------------------------+\n| ST_Distance(@g1, @g2, \'metre\') |\n+--------------------------------+\n|              156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, \'foot\');\n+-------------------------------+\n| ST_Distance(@g1, @g2, \'foot\') |\n+-------------------------------+\n|             514679.7439273146 |\n+-------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(353,'ST_EQUALS',31,'ST_Equals(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially equal to g2.\n\nST_Equals() handles its arguments as described in the introduction to\nthis section, except that it does not return NULL for empty geometry\narguments.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(354,'ST_FRECHETDISTANCE',31,'ST_FrechetDistance(g1, g2 [, unit])\n\nReturns the discrete Fréchet distance between two geometries,\nreflecting how similar the geometries are. The result is a\ndouble-precision number measured in the length unit of the spatial\nreference system (SRS) of the geometry arguments, or in the length unit\nof the unit argument if that argument is given.\n\nThis function implements the discrete Fréchet distance, which means it\nis restricted to distances between the points of the geometries. For\nexample, given two LineString arguments, only the points explicitly\nmentioned in the geometries are considered. Points on the line segments\nbetween these points are not considered.\n\nST_FrechetDistance() handles its geometry arguments as described in the\nintroduction to this section, with these exceptions:\n\no The geometries may have a Cartesian or geographic SRS, but only\n  LineString values are supported. If the arguments are in the same\n  Cartesian or geographic SRS, but either is not a LineString, an\n  ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_cartesian_srs) or\n  ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_geographic_srs) error occurs,\n  depending on the SRS type.\n\nST_FrechetDistance() handles its optional unit argument as described in\nthe introduction to this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','mysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0,0 5,5 5)\');\nmysql> SET @ls2 = ST_GeomFromText(\'LINESTRING(0 1,0 6,3 3,5 6)\');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|             2.8284271247461903 |\n+--------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0,0 5,5 5)\', 4326);\nmysql> SET @ls2 = ST_GeomFromText(\'LINESTRING(0 1,0 6,3 3,5 6)\', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n|              313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, \'foot\');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, \'foot\') |\n+----------------------------------------+\n|                     1028284.7767115477 |\n+----------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(355,'ST_HAUSDORFFDISTANCE',31,'ST_HausdorffDistance(g1, g2 [, unit])\n\nReturns the discrete Hausdorff distance between two geometries,\nreflecting how similar the geometries are. The result is a\ndouble-precision number measured in the length unit of the spatial\nreference system (SRS) of the geometry arguments, or in the length unit\nof the unit argument if that argument is given.\n\nThis function implements the discrete Hausdorff distance, which means\nit is restricted to distances between the points of the geometries. For\nexample, given two LineString arguments, only the points explicitly\nmentioned in the geometries are considered. Points on the line segments\nbetween these points are not considered.\n\nST_HausdorffDistance() handles its geometry arguments as described in\nthe introduction to this section, with these exceptions:\n\no If the geometry arguments are in the same Cartesian or geographic\n  SRS, but are not in a supported combination, an\n  ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_cartesian_srs) or\n  ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_geographic_srs) error occurs,\n  depending on the SRS type. These combinations are supported:\n\n  o LineString and LineString\n\n  o Point and MultiPoint\n\n  o LineString and MultiLineString\n\n  o MultiPoint and MultiPoint\n\n  o MultiLineString and MultiLineString\n\nST_HausdorffDistance() handles its optional unit argument as described\nin the introduction to this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','mysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0,0 5,5 5)\');\nmysql> SET @ls2 = ST_GeomFromText(\'LINESTRING(0 1,0 6,3 3,5 6)\');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|                                1 |\n+----------------------------------+\n\nmysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0,0 5,5 5)\', 4326);\nmysql> SET @ls2 = ST_GeomFromText(\'LINESTRING(0 1,0 6,3 3,5 6)\', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n|               111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, \'foot\');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, \'foot\') |\n+------------------------------------------+\n|                        365221.4264870815 |\n+------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(356,'ST_INTERSECTS',31,'ST_Intersects(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 spatially intersects g2.\n\nST_Intersects() handles its arguments as described in the introduction\nto this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(357,'ST_OVERLAPS',31,'ST_Overlaps(g1, g2)\n\nTwo geometries spatially overlap if they intersect and their\nintersection results in a geometry of the same dimension but not equal\nto either of the given geometries.\n\nThis function returns 1 or 0 to indicate whether g1 spatially overlaps\ng2.\n\nST_Overlaps() handles its arguments as described in the introduction to\nthis section except that the return value is NULL for the additional\ncondition that the dimensions of the two geometries are not equal.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(358,'ST_TOUCHES',31,'ST_Touches(g1, g2)\n\nTwo geometries spatially touch if their interiors do not intersect, but\nthe boundary of one of the geometries intersects either the boundary or\nthe interior of the other.\n\nThis function returns 1 or 0 to indicate whether g1 spatially touches\ng2.\n\nST_Touches() handles its arguments as described in the introduction to\nthis section except that the return value is NULL for the additional\ncondition that both geometries are of dimension 0 (Point or\nMultiPoint).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(359,'ST_WITHIN',31,'ST_Within(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially within g2. This\ntests the opposite relationship as ST_Contains().\n\nST_Within() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html'),(360,'MBRCONTAINS',32,'MBRContains(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\ncontains the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRWithin().\n\nMBRContains() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Point(1 1)\');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(361,'MBRCOVEREDBY',32,'MBRCoveredBy(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\nis covered by the minimum bounding rectangle of g2. This tests the\nopposite relationship as MBRCovers().\n\nMBRCoveredBy() handles its arguments as described in the introduction\nto this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Point(1 1)\');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(362,'MBRCOVERS',32,'MBRCovers(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\ncovers the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRCoveredBy(). See the description of MBRCoveredBy()\nfor examples.\n\nMBRCovers() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(363,'MBRDISJOINT',32,'MBRDisjoint(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 are disjoint (do not intersect).\n\nMBRDisjoint() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(364,'MBREQUALS',32,'MBREquals(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 are the same.\n\nMBREquals() handles its arguments as described in the introduction to\nthis section, except that it does not return NULL for empty geometry\narguments.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(365,'MBRINTERSECTS',32,'MBRIntersects(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 intersect.\n\nMBRIntersects() handles its arguments as described in the introduction\nto this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(366,'MBROVERLAPS',32,'MBROverlaps(g1, g2)\n\nTwo geometries spatially overlap if they intersect and their\nintersection results in a geometry of the same dimension but not equal\nto either of the given geometries.\n\nThis function returns 1 or 0 to indicate whether the minimum bounding\nrectangles of the two geometries g1 and g2 overlap.\n\nMBROverlaps() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(367,'MBRTOUCHES',32,'MBRTouches(g1, g2)\n\nTwo geometries spatially touch if their interiors do not intersect, but\nthe boundary of one of the geometries intersects either the boundary or\nthe interior of the other.\n\nThis function returns 1 or 0 to indicate whether the minimum bounding\nrectangles of the two geometries g1 and g2 touch.\n\nMBRTouches() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(368,'MBRWITHIN',32,'MBRWithin(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\nis within the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRContains().\n\nMBRWithin() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Polygon((0 0,0 5,5 5,5 0,0 0))\');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html'),(369,'ST_GEOHASH',32,'ST_GeoHash(longitude, latitude, max_length), ST_GeoHash(point,\nmax_length)\n\nReturns a geohash string in the connection character set and collation.\n\nFor the first syntax, the longitude must be a number in the range\n[−180, 180], and the latitude must be a number in the range [−90,\n90]. For the second syntax, a POINT value is required, where the X and\nY coordinates are in the valid ranges for longitude and latitude,\nrespectively.\n\nThe resulting string is no longer than max_length characters, which has\nan upper limit of 100. The string might be shorter than max_length\ncharacters because the algorithm that creates the geohash value\ncontinues until it has created a string that is either an exact\nrepresentation of the location or max_length characters, whichever\ncomes first.\n\nST_GeoHash() handles its arguments as described in the introduction to\nthis section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html\n\n','mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html'),(370,'ST_LATFROMGEOHASH',32,'ST_LatFromGeoHash(geohash_str)\n\nReturns the latitude from a geohash string value, as a double-precision\nnumber in the range [−90, 90].\n\nThe ST_LatFromGeoHash() decoding function reads no more than 433\ncharacters from the geohash_str argument. That represents the upper\nlimit on information in the internal representation of coordinate\nvalues. Characters past the 433rd are ignored, even if they are\notherwise illegal and produce an error.\n\nST_LatFromGeoHash() handles its arguments as described in the\nintroduction to this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html\n\n','mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html'),(371,'ST_LONGFROMGEOHASH',32,'ST_LongFromGeoHash(geohash_str)\n\nReturns the longitude from a geohash string value, as a\ndouble-precision number in the range [−180, 180].\n\nThe remarks in the description of ST_LatFromGeoHash() regarding the\nmaximum number of characters processed from the geohash_str argument\nalso apply to ST_LongFromGeoHash().\n\nST_LongFromGeoHash() handles its arguments as described in the\nintroduction to this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html\n\n','mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html'),(372,'ST_POINTFROMGEOHASH',32,'ST_PointFromGeoHash(geohash_str, srid)\n\nReturns a POINT value containing the decoded geohash value, given a\ngeohash string value.\n\nThe X and Y coordinates of the point are the longitude in the range\n[−180, 180] and the latitude in the range [−90, 90], respectively.\n\nThe srid argument is an 32-bit unsigned integer.\n\nThe remarks in the description of ST_LatFromGeoHash() regarding the\nmaximum number of characters processed from the geohash_str argument\nalso apply to ST_PointFromGeoHash().\n\nST_PointFromGeoHash() handles its arguments as described in the\nintroduction to this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html\n\n','mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html'),(373,'ST_ASGEOJSON',32,'ST_AsGeoJSON(g [, max_dec_digits [, options]])\n\nGenerates a GeoJSON object from the geometry g. The object string has\nthe connection character set and collation.\n\nIf any argument is NULL, the return value is NULL. If any non-NULL\nargument is invalid, an error occurs.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html\n\n','mysql> SELECT ST_AsGeoJSON(ST_GeomFromText(\'POINT(11.11111 12.22222)\'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText(\'POINT(11.11111 12.22222)\'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html'),(374,'ST_GEOMFROMGEOJSON',32,'ST_GeomFromGeoJSON(str [, options [, srid]])\n\nParses a string str representing a GeoJSON object and returns a\ngeometry.\n\nIf any argument is NULL, the return value is NULL. If any non-NULL\nargument is invalid, an error occurs.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html\n\n','mysql> SET @json = \'{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}\';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102)                         |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n|                               4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0)                                    |\n+-------------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html'),(375,'ST_COLLECT',32,'ST_Collect([DISTINCT] g) [over_clause]\n\nAggregates geometry values and returns a single geometry collection\nvalue. With the DISTINCT option, returns the aggregation of the\ndistinct geometry arguments.\n\nAs with other aggregate functions, GROUP BY may be used to group\narguments into subsets. ST_Collect() returns an aggregate value for\neach subset.\n\nThis function executes as a window function if over_clause is present.\nover_clause is as described in\nhttps://dev.mysql.com/doc/refman/8.4/en/window-functions-usage.html. In\ncontrast to most aggregate functions that support windowing,\nST_Collect() permits use of over_clause together with DISTINCT.\n\nST_Collect() handles its arguments as follows:\n\no NULL arguments are ignored.\n\no If all arguments are NULL or the aggregate result is empty, the\n  return value is NULL.\n\no If any geometry argument is not a syntactically well-formed geometry,\n  an ER_GIS_INVALID_DATA\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_gis_invalid_data) error occurs.\n\no If any geometry argument is a syntactically well-formed geometry in\n  an undefined spatial reference system (SRS), an ER_SRS_NOT_FOUND\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_srs_not_found) error occurs.\n\no If there are multiple geometry arguments and those arguments are in\n  the same SRS, the return value is in that SRS. If those arguments are\n  not in the same SRS, an ER_GIS_DIFFERENT_SRIDS_AGGREGATION\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_gis_different_srids_aggregation) error occurs.\n\no The result is the narrowest MultiXxx or GeometryCollection value\n  possible, with the result type determined from the non-NULL geometry\n  arguments as follows:\n\n  o If all arguments are Point values, the result is a MultiPoint\n    value.\n\n  o If all arguments are LineString values, the result is a\n    MultiLineString value.\n\n  o If all arguments are Polygon values, the result is a MultiPolygon\n    value.\n\n  o Otherwise, the arguments are a mix of geometry types and the result\n    is a GeometryCollection value.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-aggregate-functions.html\n\n','CREATE TABLE product (\n  year INTEGER,\n  product VARCHAR(256),\n  location Geometry\n);\n\nINSERT INTO product\n(year,  product,     location) VALUES\n(2000, \"Calculator\", ST_GeomFromText(\'point(60 -24)\',4326)),\n(2000, \"Computer\"  , ST_GeomFromText(\'point(28 -77)\',4326)),\n(2000, \"Abacus\"    , ST_GeomFromText(\'point(28 -77)\',4326)),\n(2000, \"TV\"        , ST_GeomFromText(\'point(38  60)\',4326)),\n(2001, \"Calculator\", ST_GeomFromText(\'point(60 -24)\',4326)),\n(2001, \"Computer\"  , ST_GeomFromText(\'point(28 -77)\',4326));\n\nmysql> SELECT ST_AsText(ST_Collect(location)) AS result\n       FROM product;\n+------------------------------------------------------------------+\n| result                                                           |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\n\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product;\n+---------------------------------------+\n| result                                |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\n       FROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result                                         |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))                  |\n+------+------------------------------------------------+\n\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\n       FROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result                                |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77))         |\n+------+---------------------------------------+\n\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\n       FROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL   |\n+--------+\n\nmysql> SELECT ST_AsText(ST_Collect(location)\n         OVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\n         AS result\n       FROM product;\n+-------------------------------+\n| result                        |\n+-------------------------------+\n| MULTIPOINT((28 -77))          |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60))  |\n| MULTIPOINT((38 60),(60 -24))  |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-aggregate-functions.html'),(376,'ST_DISTANCE_SPHERE',32,'ST_Distance_Sphere(g1, g2 [, radius])\n\nReturns the minimum spherical distance between Point or MultiPoint\narguments on a sphere, in meters. (For general-purpose distance\ncalculations, see the ST_Distance() function.) The optional radius\nargument should be given in meters.\n\nIf both geometry parameters are valid Cartesian Point or MultiPoint\nvalues in SRID 0, the return value is shortest distance between the two\ngeometries on a sphere with the provided radius. If omitted, the\ndefault radius is 6,370,986 meters, Point X and Y coordinates are\ninterpreted as longitude and latitude, respectively, in degrees.\n\nIf both geometry parameters are valid Point or MultiPoint values in a\ngeographic spatial reference system (SRS), the return value is the\nshortest distance between the two geometries on a sphere with the\nprovided radius. If omitted, the default radius is equal to the mean\nradius, defined as (2a+b)/3, where a is the semi-major axis and b is\nthe semi-minor axis of the SRS.\n\nST_Distance_Sphere() handles its arguments as described in the\nintroduction to this section, with these exceptions:\n\no Supported geometry argument combinations are Point and Point, or\n  Point and MultiPoint (in any argument order). If at least one of the\n  geometries is neither Point nor MultiPoint, and its SRID is 0, an\n  ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_cartesian_srs) error occurs. If at\n  least one of the geometries is neither Point nor MultiPoint, and its\n  SRID refers to a geographic SRS, an\n  ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_geographic_srs) error occurs. If\n  any geometry refers to a projected SRS, an\n  ER_NOT_IMPLEMENTED_FOR_PROJECTED_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_projected_srs) error occurs.\n\no If any argument has a longitude or latitude that is out of range, an\n  error occurs:\n\n  o If a longitude value is not in the range (−180, 180], an\n    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n    (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-referen\n    ce.html#error_er_geometry_param_longitude_out_of_range) error\n    occurs.\n\n  o If a latitude value is not in the range [−90, 90], an\n    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n    (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-referen\n    ce.html#error_er_geometry_param_latitude_out_of_range) error\n    occurs.\n\n  Ranges shown are in degrees. If an SRS uses another unit, the range\n  uses the corresponding values in its unit. The exact range limits\n  deviate slightly due to floating-point arithmetic.\n\no If the radius argument is present but not positive, an\n  ER_NONPOSITIVE_RADIUS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_nonpositive_radius) error occurs.\n\no If the distance exceeds the range of a double-precision number, an\n  ER_STD_OVERFLOW_ERROR\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_std_overflow_error) error occurs.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html\n\n','mysql> SET @pt1 = ST_GeomFromText(\'POINT(0 0)\');\nmysql> SET @pt2 = ST_GeomFromText(\'POINT(180 0)\');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html'),(377,'ST_ISVALID',32,'ST_IsValid(g)\n\nReturns 1 if the argument is geometrically valid, 0 if the argument is\nnot geometrically valid. Geometry validity is defined by the OGC\nspecification.\n\nThe only valid empty geometry is represented in the form of an empty\ngeometry collection value. ST_IsValid() returns 1 in this case. MySQL\ndoes not support GIS EMPTY values such as POINT EMPTY.\n\nST_IsValid() handles its arguments as described in the introduction to\nthis section, with this exception:\n\no If the geometry has a geographic SRS with a longitude or latitude\n  that is out of range, an error occurs:\n\n  o If a longitude value is not in the range (−180, 180], an\n    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n    (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-referen\n    ce.html#error_er_geometry_param_longitude_out_of_range) error\n    occurs.\n\n  o If a latitude value is not in the range [−90, 90], an\n    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n    (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-referen\n    ce.html#error_er_geometry_param_latitude_out_of_range) error\n    occurs.\n\n  Ranges shown are in degrees. If an SRS uses another unit, the range\n  uses the corresponding values in its unit. The exact range limits\n  deviate slightly due to floating-point arithmetic.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html\n\n','mysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0,-0.00 0,0.0 0)\');\nmysql> SET @ls2 = ST_GeomFromText(\'LINESTRING(0 0, 1 1)\');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html'),(378,'ST_MAKEENVELOPE',32,'ST_MakeEnvelope(pt1, pt2)\n\nReturns the rectangle that forms the envelope around two points, as a\nPoint, LineString, or Polygon.\n\nCalculations are done using the Cartesian coordinate system rather than\non a sphere, spheroid, or on earth.\n\nGiven two points pt1 and pt2, ST_MakeEnvelope() creates the result\ngeometry on an abstract plane like this:\n\no If pt1 and pt2 are equal, the result is the point pt1.\n\no Otherwise, if (pt1, pt2) is a vertical or horizontal line segment,\n  the result is the line segment (pt1, pt2).\n\no Otherwise, the result is a polygon using pt1 and pt2 as diagonal\n  points.\n\nThe result geometry has an SRID of 0.\n\nST_MakeEnvelope() handles its arguments as described in the\nintroduction to this section, with these exceptions:\n\no If the arguments are not Point values, an ER_WRONG_ARGUMENTS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_wrong_arguments) error occurs.\n\no An ER_GIS_INVALID_DATA\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_gis_invalid_data) error occurs for the additional\n  condition that any coordinate value of the two points is infinite or\n  NaN.\n\no If any geometry has an SRID value for a geographic spatial reference\n  system (SRS), an ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_not_implemented_for_geographic_srs) error occurs.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html\n\n','mysql> SET @pt1 = ST_GeomFromText(\'POINT(0 0)\');\nmysql> SET @pt2 = ST_GeomFromText(\'POINT(1 1)\');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html'),(379,'ST_SIMPLIFY',32,'ST_Simplify(g, max_distance)\n\nSimplifies a geometry using the Douglas-Peucker algorithm and returns a\nsimplified value of the same type.\n\nThe geometry may be any geometry type, although the Douglas-Peucker\nalgorithm may not actually process every type. A geometry collection is\nprocessed by giving its components one by one to the simplification\nalgorithm, and the returned geometries are put into a geometry\ncollection as result.\n\nThe max_distance argument is the distance (in units of the input\ncoordinates) of a vertex to other segments to be removed. Vertices\nwithin this distance of the simplified linestring are removed.\n\nAccording to Boost.Geometry, geometries might become invalid as a\nresult of the simplification process, and the process might create\nself-intersections. To check the validity of the result, pass it to\nST_IsValid().\n\nST_Simplify() handles its arguments as described in the introduction to\nthis section, with this exception:\n\no If the max_distance argument is not positive, or is NaN, an\n  ER_WRONG_ARGUMENTS\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_wrong_arguments) error occurs.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html\n\n','mysql> SET @g = ST_GeomFromText(\'LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)\');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html'),(380,'ST_VALIDATE',32,'ST_Validate(g)\n\nValidates a geometry according to the OGC specification. A geometry can\nbe syntactically well-formed (WKB value plus SRID) but geometrically\ninvalid. For example, this polygon is geometrically invalid: POLYGON((0\n0, 0 0, 0 0, 0 0, 0 0))\n\nST_Validate() returns the geometry if it is syntactically well-formed\nand is geometrically valid, NULL if the argument is not syntactically\nwell-formed or is not geometrically valid or is NULL.\n\nST_Validate() can be used to filter out invalid geometry data, although\nat a cost. For applications that require more precise results not\ntainted by invalid data, this penalty may be worthwhile.\n\nIf the geometry argument is valid, it is returned as is, except that if\nan input Polygon or MultiPolygon has clockwise rings, those rings are\nreversed before checking for validity. If the geometry is valid, the\nvalue with the reversed rings is returned.\n\nThe only valid empty geometry is represented in the form of an empty\ngeometry collection value. ST_Validate() returns it directly without\nfurther checks in this case.\n\nST_Validate() handles its arguments as described in the introduction to\nthis section, with the exceptions listed here:\n\no If the geometry has a geographic SRS with a longitude or latitude\n  that is out of range, an error occurs:\n\n  o If a longitude value is not in the range (−180, 180], an\n    ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE\n    (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-referen\n    ce.html#error_er_geometry_param_longitude_out_of_range) error\n    occurs.\n\n  o If a latitude value is not in the range [−90, 90], an\n    ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE\n    (https://dev.mysql.com/doc/mysql