function returns NULL if\nstr is NULL.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT ORD(\'2\');\n        -> 50\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(211,'POSITION',15,'Syntax:\nPOSITION(substr IN str)\n\nPOSITION(substr IN str) is a synonym for LOCATE(substr,str).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(212,'QUOTE',15,'Syntax:\nQUOTE(str)\n\nQuotes a string to produce a result that can be used as a properly\nescaped data value in an SQL statement. The string is returned enclosed\nby single quotation marks and with each instance of backslash (\\),\nsingle quote (\'), ASCII NUL, and Control+Z preceded by a backslash. If\nthe argument is NULL, the return value is the word \"NULL\" without\nenclosing single quotation marks.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT QUOTE(\'Don\\\'t!\');\n        -> \'Don\\\'t!\'\nmysql> SELECT QUOTE(NULL);\n        -> NULL\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(213,'REPEAT FUNCTION',15,'Syntax:\nREPEAT(str,count)\n\nReturns a string consisting of the string str repeated count times. If\ncount is less than 1, returns an empty string. Returns NULL if str or\ncount is NULL.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT REPEAT(\'MySQL\', 3);\n        -> \'MySQLMySQLMySQL\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(214,'REPLACE FUNCTION',15,'Syntax:\nREPLACE(str,from_str,to_str)\n\nReturns the string str with all occurrences of the string from_str\nreplaced by the string to_str. REPLACE() performs a case-sensitive\nmatch when searching for from_str.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT REPLACE(\'www.mysql.com\', \'w\', \'Ww\');\n        -> \'WwWwWw.mysql.com\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(215,'REVERSE',15,'Syntax:\nREVERSE(str)\n\nReturns the string str with the order of the characters reversed, or\nNULL if str is NULL.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT REVERSE(\'abc\');\n        -> \'cba\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(216,'RIGHT',15,'Syntax:\nRIGHT(str,len)\n\nReturns the rightmost len characters from the string str, or NULL if\nany argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT RIGHT(\'foobarbar\', 4);\n        -> \'rbar\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(217,'RPAD',15,'Syntax:\nRPAD(str,len,padstr)\n\nReturns the string str, right-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters. If str, padstr, or len is NULL, the\nfunction returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT RPAD(\'hi\',5,\'?\');\n        -> \'hi???\'\nmysql> SELECT RPAD(\'hi\',1,\'?\');\n        -> \'h\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(218,'RTRIM',15,'Syntax:\nRTRIM(str)\n\nReturns the string str with trailing space characters removed.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT RTRIM(\'barbar   \');\n        -> \'barbar\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(219,'SOUNDEX',15,'Syntax:\nSOUNDEX(str)\n\nReturns a soundex string from str, or NULL if str is NULL. Two strings\nthat sound almost the same should have identical soundex strings. A\nstandard soundex string is four characters long, but the SOUNDEX()\nfunction returns an arbitrarily long string. You can use SUBSTRING() on\nthe result to get a standard soundex string. All nonalphabetic\ncharacters in str are ignored. All international alphabetic characters\noutside the A-Z range are treated as vowels.\n\n*Important*:\n\nWhen using SOUNDEX(), you should be aware of the following limitations:\n\no This function, as currently implemented, is intended to work well\n  with strings that are in the English language only. Strings in other\n  languages may not produce reliable results.\n\no This function is not guaranteed to provide consistent results with\n  strings that use multibyte character sets, including utf-8. See Bug\n  #22638 for more information.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT SOUNDEX(\'Hello\');\n        -> \'H400\'\nmysql> SELECT SOUNDEX(\'Quadratically\');\n        -> \'Q36324\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(220,'SOUNDS LIKE',15,'Syntax:\nexpr1 SOUNDS LIKE expr2\n\nThis is the same as SOUNDEX(expr1) = SOUNDEX(expr2).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(221,'SPACE',15,'Syntax:\nSPACE(N)\n\nReturns a string consisting of N space characters, or NULL if N is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT SPACE(6);\n        -> \'      \'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(222,'SUBSTR',15,'Syntax:\nSUBSTR(str,pos), SUBSTR(str FROM pos), SUBSTR(str,pos,len), SUBSTR(str\nFROM pos FOR len)\n\nSUBSTR() is a synonym for SUBSTRING().\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(223,'SUBSTRING',15,'Syntax:\nSUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n\nThe forms without a len argument return a substring from string str\nstarting at position pos. The forms with a len argument return a\nsubstring len characters long from string str, starting at position\npos. The forms that use FROM are standard SQL syntax. It is also\npossible to use a negative value for pos. In this case, the beginning\nof the substring is pos characters from the end of the string, rather\nthan the beginning. A negative value may be used for pos in any of the\nforms of this function. A value of 0 for pos returns an empty string.\n\nFor all forms of SUBSTRING(), the position of the first character in\nthe string from which the substring is to be extracted is reckoned as\n1.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT SUBSTRING(\'Quadratically\',5);\n        -> \'ratically\'\nmysql> SELECT SUBSTRING(\'foobarbar\' FROM 4);\n        -> \'barbar\'\nmysql> SELECT SUBSTRING(\'Quadratically\',5,6);\n        -> \'ratica\'\nmysql> SELECT SUBSTRING(\'Sakila\', -3);\n        -> \'ila\'\nmysql> SELECT SUBSTRING(\'Sakila\', -5, 3);\n        -> \'aki\'\nmysql> SELECT SUBSTRING(\'Sakila\' FROM -4 FOR 2);\n        -> \'ki\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(224,'SUBSTRING_INDEX',15,'Syntax:\nSUBSTRING_INDEX(str,delim,count)\n\nReturns the substring from string str before count occurrences of the\ndelimiter delim. If count is positive, everything to the left of the\nfinal delimiter (counting from the left) is returned. If count is\nnegative, everything to the right of the final delimiter (counting from\nthe right) is returned. SUBSTRING_INDEX() performs a case-sensitive\nmatch when searching for delim.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT SUBSTRING_INDEX(\'www.mysql.com\', \'.\', 2);\n        -> \'www.mysql\'\nmysql> SELECT SUBSTRING_INDEX(\'www.mysql.com\', \'.\', -2);\n        -> \'mysql.com\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(225,'TO_BASE64',15,'Syntax:\nTO_BASE64(str)\n\nConverts the string argument to base-64 encoded form and returns the\nresult as a character string with the connection character set and\ncollation. If the argument is not a string, it is converted to a string\nbefore conversion takes place. The result is NULL if the argument is\nNULL. Base-64 encoded strings can be decoded using the FROM_BASE64()\nfunction.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT TO_BASE64(\'abc\'), FROM_BASE64(TO_BASE64(\'abc\'));\n        -> \'JWJj\', \'abc\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(226,'TRIM',15,'Syntax:\nTRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr\nFROM] str)\n\nReturns the string str with all remstr prefixes or suffixes removed. If\nnone of the specifiers BOTH, LEADING, or TRAILING is given, BOTH is\nassumed. remstr is optional and, if not specified, spaces are removed.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT TRIM(\'  bar   \');\n        -> \'bar\'\nmysql> SELECT TRIM(LEADING \'x\' FROM \'xxxbarxxx\');\n        -> \'barxxx\'\nmysql> SELECT TRIM(BOTH \'x\' FROM \'xxxbarxxx\');\n        -> \'bar\'\nmysql> SELECT TRIM(TRAILING \'xyz\' FROM \'barxxyz\');\n        -> \'barx\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(227,'UCASE',15,'Syntax:\nUCASE(str)\n\nUCASE() is a synonym for UPPER().\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(228,'UNHEX',15,'Syntax:\nUNHEX(str)\n\nFor a string argument str, UNHEX(str) interprets each pair of\ncharacters in the argument as a hexadecimal number and converts it to\nthe byte represented by the number. The return value is a binary\nstring.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','mysql> SELECT UNHEX(\'4D7953514C\');\n        -> \'MySQL\'\nmysql> SELECT X\'4D7953514C\';\n        -> \'MySQL\'\nmysql> SELECT UNHEX(HEX(\'string\'));\n        -> \'string\'\nmysql> SELECT HEX(UNHEX(\'1267\'));\n        -> \'1267\'\n','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(229,'UPPER',15,'Syntax:\nUPPER(str)\n\nReturns the string str with all characters changed to uppercase\naccording to the current character set mapping, or NULL if str is NULL.\nThe default character set is utf8mb4.\n\nmysql> SELECT UPPER(\'Hej\');\n        -> \'HEJ\'\n\nSee the description of LOWER() for information that also applies to\nUPPER(). This included information about how to perform lettercase\nconversion of binary strings (BINARY, VARBINARY, BLOB) for which these\nfunctions are ineffective, and information about case folding for\nUnicode character sets.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(230,'WEIGHT_STRING',15,'Syntax:\nWEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [flags])\n\nThis function returns the weight string for the input string. The\nreturn value is a binary string that represents the comparison and\nsorting value of the string, or NULL if the argument is NULL. It has\nthese properties:\n\no If WEIGHT_STRING(str1) = WEIGHT_STRING(str2), then str1 = str2 (str1\n  and str2 are considered equal)\n\no If WEIGHT_STRING(str1) < WEIGHT_STRING(str2), then str1 < str2 (str1\n  sorts before str2)\n\nWEIGHT_STRING() is a debugging function intended for internal use. Its\nbehavior can change without notice between MySQL versions. It can be\nused for testing and debugging of collations, especially if you are\nadding a new collation. See\nhttps://dev.mysql.com/doc/refman/8.4/en/adding-collation.html.\n\nThis list briefly summarizes the arguments. More details are given in\nthe discussion following the list.\n\no str: The input string expression.\n\no AS clause: Optional; cast the input string to a given type and\n  length.\n\no flags: Optional; unused.\n\nThe input string, str, is a string expression. If the input is a\nnonbinary (character) string such as a CHAR, VARCHAR, or TEXT value,\nthe return value contains the collation weights for the string. If the\ninput is a binary (byte) string such as a BINARY, VARBINARY, or BLOB\nvalue, the return value is the same as the input (the weight for each\nbyte in a binary string is the byte value). If the input is NULL,\nWEIGHT_STRING() returns NULL.\n\nExamples:\n\nmysql> SET @s = _utf8mb4 \'AB\' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 1C471C60               |\n+------+---------+------------------------+\n\nmysql> SET @s = _utf8mb4 \'ab\' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 1C471C60               |\n+------+---------+------------------------+\n\nmysql> SET @s = CAST(\'AB\' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+\n\nmysql> SET @s = CAST(\'ab\' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/string-functions.html'),(231,'LIKE',15,'Syntax:\nexpr LIKE pat [ESCAPE \'escape_char\']\n\nPattern matching using an SQL pattern. Returns 1 (TRUE) or 0 (FALSE).\nIf either expr or pat is NULL, the result is NULL.\n\nThe pattern need not be a literal string. For example, it can be\nspecified as a string expression or table column. In the latter case,\nthe column must be defined as one of the MySQL string types (see\nhttps://dev.mysql.com/doc/refman/8.4/en/string-types.html).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html\n\n','mysql> SELECT \'David!\' LIKE \'David_\';\n        -> 1\nmysql> SELECT \'David!\' LIKE \'%D%v%\';\n        -> 1\n','https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html'),(232,'NOT LIKE',15,'Syntax:\nexpr NOT LIKE pat [ESCAPE \'escape_char\']\n\nThis is the same as NOT (expr LIKE pat [ESCAPE \'escape_char\']).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html'),(233,'STRCMP',15,'Syntax:\nSTRCMP(expr1,expr2)\n\nSTRCMP() returns 0 if the strings are the same, -1 if the first\nargument is smaller than the second according to the current sort\norder, and NULL if either argument is NULL. It returns 1 otherwise.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html\n\n','mysql> SELECT STRCMP(\'text\', \'text2\');\n        -> -1\nmysql> SELECT STRCMP(\'text2\', \'text\');\n        -> 1\nmysql> SELECT STRCMP(\'text\', \'text\');\n        -> 0\n','https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html'),(234,'NOT REGEXP',15,'Syntax:\nexpr NOT REGEXP pat, expr NOT RLIKE pat\n\nThis is the same as NOT (expr REGEXP pat).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/regexp.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/regexp.html'),(235,'REGEXP',15,'Syntax:\nexpr REGEXP pat, expr RLIKE pat\n\nReturns 1 if the string expr matches the regular expression specified\nby the pattern pat, 0 otherwise. If expr or pat is NULL, the return\nvalue is NULL.\n\nREGEXP and RLIKE are synonyms for REGEXP_LIKE().\n\nFor additional information about how matching occurs, see the\ndescription for REGEXP_LIKE().\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/regexp.html\n\n','mysql> SELECT \'Michael!\' REGEXP \'.*\';\n+------------------------+\n| \'Michael!\' REGEXP \'.*\' |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT \'new*\\n*line\' REGEXP \'new\\\\*.\\\\*line\';\n+---------------------------------------+\n| \'new*\\n*line\' REGEXP \'new\\\\*.\\\\*line\' |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\nmysql> SELECT \'a\' REGEXP \'^[a-d]\';\n+---------------------+\n| \'a\' REGEXP \'^[a-d]\' |\n+---------------------+\n|                   1 |\n+---------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/regexp.html'),(236,'REGEXP_INSTR',15,'REGEXP_INSTR(expr, pat[, pos[, occurrence[, return_option[,\nmatch_type]]]])\n\nReturns the starting index of the substring of the string expr that\nmatches the regular expression specified by the pattern pat, 0 if there\nis no match. If expr or pat is NULL, the return value is NULL.\nCharacter indexes begin at 1.\n\nREGEXP_INSTR() takes these optional arguments:\n\no pos: The position in expr at which to start the search. If omitted,\n  the default is 1.\n\no occurrence: Which occurrence of a match to search for. If omitted,\n  the default is 1.\n\no return_option: Which type of position to return. If this value is 0,\n  REGEXP_INSTR() returns the position of the matched substring\'s first\n  character. If this value is 1, REGEXP_INSTR() returns the position\n  following the matched substring. If omitted, the default is 0.\n\no match_type: A string that specifies how to perform matching. The\n  meaning is as described for REGEXP_LIKE().\n\nFor additional information about how matching occurs, see the\ndescription for REGEXP_LIKE().\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/regexp.html\n\n','mysql> SELECT REGEXP_INSTR(\'dog cat dog\', \'dog\');\n+------------------------------------+\n| REGEXP_INSTR(\'dog cat dog\', \'dog\') |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\nmysql> SELECT REGEXP_INSTR(\'dog cat dog\', \'dog\', 2);\n+---------------------------------------+\n| REGEXP_INSTR(\'dog cat dog\', \'dog\', 2) |\n+---------------------------------------+\n|                                     9 |\n+---------------------------------------+\nmysql> SELECT REGEXP_INSTR(\'aa aaa aaaa\', \'a{2}\');\n+-------------------------------------+\n| REGEXP_INSTR(\'aa aaa aaaa\', \'a{2}\') |\n+-------------------------------------+\n|                                   1 |\n+-------------------------------------+\nmysql> SELECT REGEXP_INSTR(\'aa aaa aaaa\', \'a{4}\');\n+-------------------------------------+\n| REGEXP_INSTR(\'aa aaa aaaa\', \'a{4}\') |\n+-------------------------------------+\n|                                   8 |\n+-------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/regexp.html'),(237,'REGEXP_LIKE',15,'REGEXP_LIKE(expr, pat[, match_type])\n\nReturns 1 if the string expr matches the regular expression specified\nby the pattern pat, 0 otherwise. If expr or pat is NULL, the return\nvalue is NULL.\n\nThe pattern can be an extended regular expression, the syntax for which\nis discussed in\nhttps://dev.mysql.com/doc/refman/8.4/en/regexp.html#regexp-syntax. The\npattern need not be a literal string. For example, it can be specified\nas a string expression or table column.\n\nThe optional match_type argument is a string that may contain any or\nall the following characters specifying how to perform matching:\n\no c: Case-sensitive matching.\n\no i: Case-insensitive matching.\n\no m: Multiple-line mode. Recognize line terminators within the string.\n  The default behavior is to match line terminators only at the start\n  and end of the string expression.\n\no n: The . character matches line terminators. The default is for .\n  matching to stop at the end of a line.\n\no u: Unix-only line endings. Only the newline character is recognized\n  as a line ending by the ., ^, and $ match operators.\n\nIf characters specifying contradictory options are specified within\nmatch_type, the rightmost one takes precedence.\n\nBy default, regular expression operations use the character set and\ncollation of the expr and pat arguments when deciding the type of a\ncharacter and performing the comparison. If the arguments have\ndifferent character sets or collations, coercibility rules apply as\ndescribed in\nhttps://dev.mysql.com/doc/refman/8.4/en/charset-collation-coercibility.\nhtml. Arguments may be specified with explicit collation indicators to\nchange comparison behavior.\n\nmysql> SELECT REGEXP_LIKE(\'CamelCase\', \'CAMELCASE\');\n+---------------------------------------+\n| REGEXP_LIKE(\'CamelCase\', \'CAMELCASE\') |\n+---------------------------------------+\n|                                     1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE(\'CamelCase\', \'CAMELCASE\' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE(\'CamelCase\', \'CAMELCASE\' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n|                                                                0 |\n+------------------------------------------------------------------+\n\nmatch_type may be specified with the c or i characters to override the\ndefault case sensitivity. Exception: If either argument is a binary\nstring, the arguments are handled in case-sensitive fashion as binary\nstrings, even if match_type contains the i character.\n\n*Note*:\n\nMySQL uses C escape syntax in strings (for example, \\n to represent the\nnewline character). If you want your expr or pat argument to contain a\nliteral \\, you must double it. (Unless the NO_BACKSLASH_ESCAPES SQL\nmode is enabled, in which case no escape character is used.)\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/regexp.html\n\n','mysql> SELECT REGEXP_LIKE(\'Michael!\', \'.*\');\n+-------------------------------+\n| REGEXP_LIKE(\'Michael!\', \'.*\') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE(\'new*\\n*line\', \'new\\\\*.\\\\*line\');\n+----------------------------------------------+\n| REGEXP_LIKE(\'new*\\n*line\', \'new\\\\*.\\\\*line\') |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE(\'a\', \'^[a-d]\');\n+----------------------------+\n| REGEXP_LIKE(\'a\', \'^[a-d]\') |\n+----------------------------+\n|                          1 |\n+----------------------------+\n\nmysql> SELECT REGEXP_LIKE(\'abc\', \'ABC\');\n+---------------------------+\n| REGEXP_LIKE(\'abc\', \'ABC\') |\n+---------------------------+\n|                         1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE(\'abc\', \'ABC\', \'c\');\n+--------------------------------+\n| REGEXP_LIKE(\'abc\', \'ABC\', \'c\') |\n+--------------------------------+\n|                              0 |\n+--------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/regexp.html'),(238,'REGEXP_REPLACE',15,'REGEXP_REPLACE(expr, pat, repl[, pos[, occurrence[, match_type]]])\n\nReplaces occurrences in the string expr that match the regular\nexpression specified by the pattern pat with the replacement string\nrepl, and returns the resulting string. If expr, pat, or repl is NULL,\nthe return value is NULL.\n\nREGEXP_REPLACE() takes these optional arguments:\n\no pos: The position in expr at which to start the search. If omitted,\n  the default is 1.\n\no occurrence: Which occurrence of a match to replace. If omitted, the\n  default is 0 (which means \"replace all occurrences\").\n\no match_type: A string that specifies how to perform matching. The\n  meaning is as described for REGEXP_LIKE().\n\nThe result returned by this function uses the character set and\ncollation of the expression searched for matches.\n\nFor additional information about how matching occurs, see the\ndescription for REGEXP_LIKE().\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/regexp.html\n\n','mysql> SELECT REGEXP_REPLACE(\'a b c\', \'b\', \'X\');\n+-----------------------------------+\n| REGEXP_REPLACE(\'a b c\', \'b\', \'X\') |\n+-----------------------------------+\n| a X c                             |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE(\'abc def ghi\', \'[a-z]+\', \'X\', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE(\'abc def ghi\', \'[a-z]+\', \'X\', 1, 3) |\n+----------------------------------------------------+\n| abc def X                                          |\n+----------------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/regexp.html'),(239,'REGEXP_SUBSTR',15,'REGEXP_SUBSTR(expr, pat[, pos[, occurrence[, match_type]]])\n\nReturns the substring of the string expr that matches the regular\nexpression specified by the pattern pat, NULL if there is no match. If\nexpr or pat is NULL, the return value is NULL.\n\nREGEXP_SUBSTR() takes these optional arguments:\n\no pos: The position in expr at which to start the search. If omitted,\n  the default is 1.\n\no occurrence: Which occurrence of a match to search for. If omitted,\n  the default is 1.\n\no match_type: A string that specifies how to perform matching. The\n  meaning is as described for REGEXP_LIKE().\n\nThe result returned by this function uses the character set and\ncollation of the expression searched for matches.\n\nFor additional information about how matching occurs, see the\ndescription for REGEXP_LIKE().\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/regexp.html\n\n','mysql> SELECT REGEXP_SUBSTR(\'abc def ghi\', \'[a-z]+\');\n+----------------------------------------+\n| REGEXP_SUBSTR(\'abc def ghi\', \'[a-z]+\') |\n+----------------------------------------+\n| abc                                    |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR(\'abc def ghi\', \'[a-z]+\', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR(\'abc def ghi\', \'[a-z]+\', 1, 3) |\n+----------------------------------------------+\n| ghi                                          |\n+----------------------------------------------+\n','https://dev.mysql.com/doc/refman/8.4/en/regexp.html'),(240,'MATCH AGAINST',15,'Syntax:\nMATCH (col1,col2,...) AGAINST (expr [search_modifier])\n\nMySQL has support for full-text indexing and searching:\n\no A full-text index in MySQL is an index of type FULLTEXT.\n\no Full-text indexes can be used only with InnoDB or MyISAM tables, and\n  can be created only for CHAR, VARCHAR, or TEXT columns.\n\no MySQL provides a built-in full-text ngram parser that supports\n  Chinese, Japanese, and Korean (CJK), and an installable MeCab\n  full-text parser plugin for Japanese. Parsing differences are\n  outlined in\n  https://dev.mysql.com/doc/refman/8.4/en/fulltext-search-ngram.html,\n  and\n  https://dev.mysql.com/doc/refman/8.4/en/fulltext-search-mecab.html.\n\no A FULLTEXT index definition can be given in the CREATE TABLE\n  statement when a table is created, or added later using ALTER TABLE\n  or CREATE INDEX.\n\no For large data sets, it is much faster to load your data into a table\n  that has no FULLTEXT index and then create the index after that, than\n  to load data into a table that has an existing FULLTEXT index.\n\nFull-text searching is performed using MATCH() AGAINST() syntax.\nMATCH() takes a comma-separated list that names the columns to be\nsearched. AGAINST takes a string to search for, and an optional\nmodifier that indicates what type of search to perform. The search\nstring must be a string value that is constant during query evaluation.\nThis rules out, for example, a table column because that can differ for\neach row.\n\nMySQL does not permit the use of a rollup column with MATCH(); more\nspecifically, any query matching all of the criteria listed here is\nrejected with ER_FULLTEXT_WITH_ROLLUP\n(https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html\n#error_er_fulltext_with_rollup):\n\no MATCH() appears in the SELECT list, GROUP BY clause, HAVING clause,\n  or ORDER BY clause of a query block.\n\no The query block contains a GROUP BY ... WITH ROLLUP clause.\n\no The argument of the call to the MATCH() function is one of the\n  grouping columns.\n\nSome examples of such queries are shown here:\n\n# MATCH() in SELECT list...\nSELECT MATCH (a) AGAINST (\'abc\') FROM t GROUP BY a WITH ROLLUP;\nSELECT 1 FROM t GROUP BY a, MATCH (a) AGAINST (\'abc\') WITH ROLLUP;\n\n# ...in HAVING clause...\nSELECT 1 FROM t GROUP BY a WITH ROLLUP HAVING MATCH (a) AGAINST (\'abc\');\n\n# ...and in ORDER BY clause\nSELECT 1 FROM t GROUP BY a WITH ROLLUP ORDER BY MATCH (a) AGAINST (\'abc\');\n\nThe use of MATCH() with a rollup column in the WHERE clause is\npermitted.\n\nThere are three types of full-text searches:\n\no A natural language search interprets the search string as a phrase in\n  natural human language (a phrase in free text). There are no special\n  operators, with the exception of double quote (\") characters. The\n  stopword list applies. For more information about stopword lists, see\n  https://dev.mysql.com/doc/refman/8.4/en/fulltext-stopwords.html.\n\n  Full-text searches are natural language searches if the IN NATURAL\n  LANGUAGE MODE modifier is given or if no modifier is given. For more\n  information, see\n  https://dev.mysql.com/doc/refman/8.4/en/fulltext-natural-language.htm\n  l.\n\no A boolean search interprets the search string using the rules of a\n  special query language. The string contains the words to search for.\n  It can also contain operators that specify requirements such that a\n  word must be present or absent in matching rows, or that it should be\n  weighted higher or lower than usual. Certain common words (stopwords)\n  are omitted from the search index and do not match if present in the\n  search string. The IN BOOLEAN MODE modifier specifies a boolean\n  search. For more information, see\n  https://dev.mysql.com/doc/refman/8.4/en/fulltext-boolean.html.\n\no A query expansion search is a modification of a natural language\n  search. The search string is used to perform a natural language\n  search. Then words from the most relevant rows returned by the search\n  are added to the search string and the search is done again. The\n  query returns the rows from the second search. The IN NATURAL\n  LANGUAGE MODE WITH QUERY EXPANSION or WITH QUERY EXPANSION modifier\n  specifies a query expansion search. For more information, see\n  https://dev.mysql.com/doc/refman/8.4/en/fulltext-query-expansion.html\n  .\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/fulltext-search.html\n\n','mysql> SELECT id, body, MATCH (title,body)\n    ->   AGAINST (\'Security implications of running MySQL as root\'\n    ->   IN NATURAL LANGUAGE MODE) AS score\n    -> FROM articles\n    ->   WHERE MATCH (title,body) \n    ->   AGAINST(\'Security implications of running MySQL as root\'\n    ->   IN NATURAL LANGUAGE MODE);\n+----+-------------------------------------+-----------------+\n| id | body                                | score           |\n+----+-------------------------------------+-----------------+\n|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |\n|  6 | When configured properly, MySQL ... | 1.3114095926285 |\n+----+-------------------------------------+-----------------+\n2 rows in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/8.4/en/fulltext-search.html'),(241,'BINARY OPERATOR',16,'Syntax:\nBINARY expr\n\nThe BINARY operator converts the expression to a binary string (a\nstring that has the binary character set and binary collation). A\ncommon use for BINARY is to force a character string comparison to be\ndone byte by byte using numeric byte values rather than character by\ncharacter. The BINARY operator also causes trailing spaces in\ncomparisons to be significant. For information about the differences\nbetween the binary collation of the binary character set and the _bin\ncollations of nonbinary character sets, see\nhttps://dev.mysql.com/doc/refman/8.4/en/charset-binary-collations.html.\n\nThe BINARY operator is deprecated; you should expect its removal in a\nfuture version of MySQL. Use CAST(... AS BINARY) instead.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html\n\n','mysql> SET NAMES utf8mb4 COLLATE utf8mb4_general_ci;\n        -> OK\nmysql> SELECT \'a\' = \'A\';\n        -> 1\nmysql> SELECT BINARY \'a\' = \'A\';\n        -> 0\nmysql> SELECT \'a\' = \'a \';\n        -> 1\nmysql> SELECT BINARY \'a\' = \'a \';\n        -> 0\n','https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html'),(242,'CAST',16,'Syntax:\nCAST(expr AS type [ARRAY])\n\nCAST(timestamp_value AT TIME ZONE timezone_specifier AS\nDATETIME[(precision)])\n\ntimezone_specifier: [INTERVAL] \'+00:00\' | \'UTC\'\n\nWith CAST(expr AS type syntax, the CAST() function takes an expression\nof any type and produces a result value of the specified type. This\noperation may also be expressed as CONVERT(expr, type), which is\nequivalent. If expr is NULL, CAST() returns NULL.\n\nThese type values are permitted:\n\no BINARY[(N)]\n\n  Produces a string with the VARBINARY data type, except that when the\n  expression expr is empty (zero length), the result type is BINARY(0).\n  If the optional length N is given, BINARY(N) causes the cast to use\n  no more than N bytes of the argument. Values shorter than N bytes are\n  padded with 0x00 bytes to a length of N. If the optional length N is\n  not given, MySQL calculates the maximum length from the expression.\n  If the supplied or calculated length is greater than an internal\n  threshold, the result type is BLOB. If the length is still too long,\n  the result type is LONGBLOB.\n\n  For a description of how casting to BINARY affects comparisons, see\n  https://dev.mysql.com/doc/refman/8.4/en/binary-varbinary.html.\n\no CHAR[(N)] [charset_info]\n\n  Produces a string with the VARCHAR data type, unless the expression\n  expr is empty (zero length), in which case the result type is\n  CHAR(0). If the optional length N is given, CHAR(N) causes the cast\n  to use no more than N characters of the argument. No padding occurs\n  for values shorter than N characters. If the optional length N is not\n  given, MySQL calculates the maximum length from the expression. If\n  the supplied or calculated length is greater than an internal\n  threshold, the result type is TEXT. If the length is still too long,\n  the result type is LONGTEXT.\n\n  With no charset_info clause, CHAR produces a string with the default\n  character set. To specify the character set explicitly, these\n  charset_info values are permitted:\n\n  o CHARACTER SET charset_name: Produces a string with the given\n    character set.\n\n  o ASCII: Shorthand for CHARACTER SET latin1.\n\n  o UNICODE: Shorthand for CHARACTER SET ucs2.\n\n  In all cases, the string has the character set default collation.\n\no DATE\n\n  Produces a DATE value.\n\no DATETIME[(M)]\n\n  Produces a DATETIME value. If the optional M value is given, it\n  specifies the fractional seconds precision.\n\no DECIMAL[(M[,D])]\n\n  Produces a DECIMAL value. If the optional M and D values are given,\n  they specify the maximum number of digits (the precision) and the\n  number of digits following the decimal point (the scale). If D is\n  omitted, 0 is assumed. If M is omitted, 10 is assumed.\n\no DOUBLE\n\n  Produces a DOUBLE result.\n\no FLOAT[(p)]\n\n  If the precision p is not specified, produces a result of type FLOAT.\n  If p is provided and 0 <= < p <= 24, the result is of type FLOAT. If\n  25 <= p <= 53, the result is of type DOUBLE. If p < 0 or p > 53, an\n  error is returned.\n\no JSON\n\n  Produces a JSON value. For details on the rules for conversion of\n  values between JSON and other types, see\n  https://dev.mysql.com/doc/refman/8.4/en/json.html#json-comparison.\n\no NCHAR[(N)]\n\n  Like CHAR, but produces a string with the national character set. See\n  https://dev.mysql.com/doc/refman/8.4/en/charset-national.html.\n\n  Unlike CHAR, NCHAR does not permit trailing character set information\n  to be specified.\n\no REAL\n\n  Produces a result of type REAL. This is actually FLOAT if the\n  REAL_AS_FLOAT SQL mode is enabled; otherwise the result is of type\n  DOUBLE.\n\no SIGNED [INTEGER]\n\n  Produces a signed BIGINT value.\n\no spatial_type\n\n  CAST() and CONVERT() support casting geometry values from one spatial\n  type to another, for certain combinations of spatial types. For\n  details, see\n  https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html#cast-spat\n  ial-types.\n\no TIME[(M)]\n\n  Produces a TIME value. If the optional M value is given, it specifies\n  the fractional seconds precision.\n\no UNSIGNED [INTEGER]\n\n  Produces an unsigned BIGINT value.\n\no YEAR\n\n  Produces a YEAR value. These rules govern conversion to YEAR as\n  follows:\n\n  o For a four-digit number in the range 1901-2155 inclusive, or for a\n    string which can be interpreted as a four-digit number in this\n    range, return the corresponding YEAR value.\n\n  o For a number consisting of one or two digits, or for a string which\n    can be interpreted as such a number, return a YEAR value as\n    follows:\n\n    o If the number is in the range 1-69 inclusive, add 2000 and return\n      the sum.\n\n    o If the number is in the range 70-99 inclusive, add 1900 and\n      return the sum.\n\n  o For a string which evaluates to 0, return 2000.\n\n  o For the number 0, return 0.\n\n  o For a DATE, DATETIME, or TIMESTAMP value, return the YEAR portion\n    of the value. For a TIME value, return the current year.\n\n    If you do not specify the type of a TIME argument, you may get a\n    different result from what you expect, as shown here:\n\nmysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n|                     2011 |                          2021 |\n+--------------------------+-------------------------------+\n\n  o If the argument is of type DECIMAL, DOUBLE, DECIMAL, or REAL, round\n    the value to the nearest integer, then attempt to cast the value to\n    YEAR using the rules for integer values, as shown here:\n\nmysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n|                  1944 |                  1945 |\n+-----------------------+-----------------------+\n\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n|                2066 |                2067 |\n+---------------------+---------------------+\n\n  o An argument of type GEOMETRY cannot be converted to YEAR.\n\n  o For a value that cannot be successfully converted to YEAR, return\n    NULL.\n\n  A string value containing non-numeric characters which must be\n  truncated prior to conversion raises a warning, as shown here:\n\nmysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n|                    1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level   | Code | Message                                   |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: \'1979aaa\' |\n+---------+------+-------------------------------------------+\n\nInnoDB allows the use of an additional ARRAY keyword for creating a\nmulti-valued index on a JSON array as part of CREATE INDEX, CREATE\nTABLE, and ALTER TABLE statements. ARRAY is not supported except when\nused to create a multi-valued index in one of these statements, in\nwhich case it is required. The column being indexed must be a column of\ntype JSON. With ARRAY, the type following the AS keyword may specify\nany of the types supported by CAST(), with the exceptions of BINARY,\nJSON, and YEAR. For syntax information and examples, as well as other\nrelevant information, see\nhttps://dev.mysql.com/doc/refman/8.4/en/create-index.html#create-index-\nmulti-valued.\n\n*Note*:\n\nCONVERT(), unlike CAST(), does not support multi-valued index creation\nor the ARRAY keyword.\n\nCAST() supports retrieval of a TIMESTAMP value as being in UTC, using\nthe AT TIMEZONE operator. The only supported time zone is UTC; this can\nbe specified as either of \'+00:00\' or \'UTC\'. The only return type\nsupported by this syntax is DATETIME, with an optional precision\nspecifier in the range of 0 to 6, inclusive.\n\nTIMESTAMP values that use timezone offsets are also supported.\n\nmysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT                |\n+--------------------+\n1 row in set (0.00 sec)\n\nmysql> CREATE TABLE TZ (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\n\nmysql> INSERT INTO tz VALUES\n    ->     ROW(CURRENT_TIMESTAMP),\n    ->     ROW(\'2020-07-28 14:50:15+1:00\');\nQuery OK, 1 row affected (0.08 sec)\n\nmysql> TABLE tz;\n+---------------------+\n| c                   |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE \'+00:00\' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u                   |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT CAST(c AT TIME ZONE \'UTC\' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u                      |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)\n\nIf you use \'UTC\' as the time zone specifier with this form of CAST(),\nand the server raises an error such as Unknown or incorrect time zone:\n\'UTC\', you may need to install the MySQL time zone tables (see\nhttps://dev.mysql.com/doc/refman/8.4/en/time-zone-support.html#time-zon\ne-installation).\n\nAT TIME ZONE does not support the ARRAY keyword, and is not supported\nby the CONVERT() function.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html'),(243,'CONVERT',16,'Syntax:\nCONVERT(expr USING transcoding_name)\n\nCONVERT(expr,type)\n\nCONVERT(expr USING transcoding_name) is standard SQL syntax. The\nnon-USING form of CONVERT() is ODBC syntax. Regardless of the syntax\nused, the function returns NULL if expr is NULL.\n\nCONVERT(expr USING transcoding_name) converts data between different\ncharacter sets. In MySQL, transcoding names are the same as the\ncorresponding character set names. For example, this statement converts\nthe string \'abc\' in the default character set to the corresponding\nstring in the utf8mb4 character set:\n\nSELECT CONVERT(\'abc\' USING utf8mb4);\n\nCONVERT(expr, type) syntax (without USING) takes an expression and a\ntype value specifying a result type, and produces a result value of the\nspecified type. This operation may also be expressed as CAST(expr AS\ntype), which is equivalent. For more information, see the description\nof CAST().\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html\n\n','','https://dev.mysql.com/doc/refman/8.4/en/cast-functions.html'),(244,'EXTRACTVALUE',17,'Syntax:\nExtractValue(xml_frag, xpath_expr)\n\nExtractValue() takes two string arguments, a fragment of XML markup\nxml_frag and an XPath expression xpath_expr (also known as a locator);\nit returns the text (CDATA) of the first text node which is a child of\nthe element or elements matched by the XPath expression.\n\nUsing this function is the equivalent of performing a match using the\nxpath_expr after appending /text(). In other words,\nExtractValue(\'<a><b>Sakila</b></a>\', \'/a/b\') and\nExtractValue(\'<a><b>Sakila</b></a>\', \'/a/b/text()\') produce the same\nresult. If xml_frag or xpath_expr is NULL, the function returns NULL.\n\nIf multiple matches are found, the content of the first child text node\nof each matching element is returned (in the order matched) as a\nsingle, space-delimited string.\n\nIf no matching text node is found for the expression (including the\nimplicit /text())---for whatever reason, as long as xpath_expr is\nvalid, and xml_frag consists of elements which are properly nested and\nclosed---an empty string is returned. No distinction is made between a\nmatch on an empty element and no match at all. This is by design.\n\nIf you need to determine whether no matching element was found in\nxml_frag or such an element was found but contained no child text\nnodes, you should test the result of an expression that uses the XPath\ncount() function. For example, both of these statements return an empty\nstring, as shown here:\n\nmysql> SELECT ExtractValue(\'<a><b/></a>\', \'/a/b\');\n+-------------------------------------+\n| ExtractValue(\'<a><b/></a>\', \'/a/b\') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue(\'<a><c/></a>\', \'/a/b\');\n+-------------------------------------+\n| ExtractValue(\'<a><c/></a>\', \'/a/b\') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nHowever, you can determine whether there was actually a matching\nelement using the following:\n\nmysql> SELECT ExtractValue(\'<a><b/></a>\', \'count(/a/b)\');\n+-------------------------------------+\n| ExtractValue(\'<a><b/></a>\', \'count(/a/b)\') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue(\'<a><c/></a>\', \'count(/a/b)\');\n+-------------------------------------+\n| ExtractValue(\'<a><c/></a>\', \'count(/a/b)\') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)\n\n*Important*:\n\nExtractValue() returns only CDATA, and does not return any tags that\nmight be contained within a matching tag, nor any of their content (see\nthe result returned as val1 in the following example).\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html\n\n','mysql> SELECT\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/a\') AS val1,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/a/b\') AS val2,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'//b\') AS val3,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/b\') AS val4,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b><b>eee</b></a>\', \'//b\') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+\n','https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html'),(245,'UPDATEXML',17,'Syntax:\nUpdateXML(xml_target, xpath_expr, new_xml)\n\nThis function replaces a single portion of a given fragment of XML\nmarkup xml_target with a new XML fragment new_xml, and then returns the\nchanged XML. The portion of xml_target that is replaced matches an\nXPath expression xpath_expr supplied by the user.\n\nIf no expression matching xpath_expr is found, or if multiple matches\nare found, the function returns the original xml_target XML fragment.\nAll three arguments should be strings. If any of the arguments to\nUpdateXML() are NULL, the function returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html\n\n','mysql> SELECT\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/a\', \'<e>fff</e>\') AS val1,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/b\', \'<e>fff</e>\') AS val2,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'//b\', \'<e>fff</e>\') AS val3,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/a/d\', \'<e>fff</e>\') AS val4,\n    ->   UpdateXML(\'<a><d></d><b>ccc</b><d></d></a>\', \'/a/d\', \'<e>fff</e>\') AS val5\n    -> \\G\n\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>\n','https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html'),(246,'|',18,'Syntax:\n|\n\nBitwise OR.\n\nThe result type depends on whether the arguments are evaluated as\nbinary strings or numbers:\n\no Binary-string evaluation occurs when the arguments have a binary\n  string type, and at least one of them is not a hexadecimal literal,\n  bit literal, or NULL literal. Numeric evaluation occurs otherwise,\n  with argument conversion to unsigned 64-bit integers as necessary.\n\no Binary-string evaluation produces a binary string of the same length\n  as the arguments. If the arguments have unequal lengths, an\n  ER_INVALID_BITWISE_OPERANDS_SIZE\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_invalid_bitwise_operands_size) error occurs. Numeric\n  evaluation produces an unsigned 64-bit integer.\n\nFor more information, see the introductory discussion in this section.\n\nURL: https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html\n\n','mysql> SELECT 29 | 15;\n        -> 31\nmysql> SELECT _binary X\'40404040\' | X\'01020304\';\n        -> \'ABCD\'\n','https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html'),(247,'&',18,'Syntax:\n&\n\nBitwise AND.\n\nThe result type depends on whether the arguments are evaluated as\nbinary strings or numbers:\n\no Binary-string evaluation occurs when the arguments have a binary\n  string type, and at least one of them is not a hexadecimal literal,\n  bit literal, or NULL literal. Numeric evaluation occurs otherwise,\n  with argument conversion to unsigned 64-bit integers as necessary.\n\no Binary-string evaluation produces a binary string of the same length\n  as the arguments. If the arguments have unequal lengths, an\n  ER_INVALID_BITWISE_OPERANDS_SIZE\n  (https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference\n  .html#error_er_invalid_bitwise_operands_size) error occurs. Numeric\n  evaluation produces an unsigned 64-bit integ